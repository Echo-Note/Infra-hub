#!/usr/bin/env python
# -*- coding:utf-8 -*-
"""
vSphere ÂÆ¢Êà∑Á´ØÁúüÂÆûÁéØÂ¢ÉÊµãËØï
Áõ¥Êé•ËøûÊé•ÁúüÂÆû vSphere ÁéØÂ¢ÉÔºå‰∏ç‰ΩøÁî® Mock
"""

import argparse
import os
import sys
import time
from typing import Optional

from pyVmomi import vim
from vsphere_client import VSphereClient


class VSphereRealTest:
    """vSphere ÁúüÂÆûÁéØÂ¢ÉÊµãËØï"""

    def __init__(self, host: str, username: str, password: str, port: int = 443, ssl_verify: bool = False):
        """
        ÂàùÂßãÂåñÊµãËØï

        Args:
            host: vCenter/ESXi Âú∞ÂùÄ
            username: Áî®Êà∑Âêç
            password: ÂØÜÁ†Å
            port: Á´ØÂè£
            ssl_verify: ÊòØÂê¶È™åËØÅ SSL ËØÅ‰π¶
        """
        self.client = VSphereClient(
            host=host,
            username=username,
            password=password,
            port=port,
            ssl_verify=ssl_verify,
        )
        self.test_results = []

    def print_header(self, title: str):
        """ÊâìÂç∞Ê†áÈ¢ò"""
        print(f"\n{'=' * 80}")
        print(f" {title}")
        print(f"{'=' * 80}")

    def print_section(self, title: str):
        """ÊâìÂç∞ÂàÜËäÇ"""
        print(f"\n‚ñ∂ {title}")
        print("-" * 80)

    def test_connection(self) -> bool:
        """ÊµãËØï1: ËøûÊé•ÊµãËØï"""
        self.print_section("ÊµãËØï1: ËøûÊé•Âà∞ vSphere")

        try:
            start_time = time.time()
            self.client.connect()
            connection_time = time.time() - start_time

            if self.client.is_connected:
                print(f"‚úÖ ËøûÊé•ÊàêÂäü")
                print(f"   ËÄóÊó∂: {connection_time:.2f} Áßí")
                self.test_results.append(("ËøûÊé•ÊµãËØï", True, f"{connection_time:.2f}s"))
                return True
            else:
                print(f"‚ùå ËøûÊé•Â§±Ë¥•: ËøûÊé•Áä∂ÊÄÅÂºÇÂ∏∏")
                self.test_results.append(("ËøûÊé•ÊµãËØï", False, "ËøûÊé•Áä∂ÊÄÅÂºÇÂ∏∏"))
                return False

        except Exception as e:
            print(f"‚ùå ËøûÊé•Â§±Ë¥•: {e}")
            self.test_results.append(("ËøûÊé•ÊµãËØï", False, str(e)))
            return False

    def test_about_info(self) -> bool:
        """ÊµãËØï2: Ëé∑ÂèñÁâàÊú¨‰ø°ÊÅØ"""
        self.print_section("ÊµãËØï2: Ëé∑Âèñ vSphere ÁâàÊú¨‰ø°ÊÅØ")

        try:
            about = self.client.get_about_info()

            print(f"‚úÖ ÊàêÂäüËé∑ÂèñÁâàÊú¨‰ø°ÊÅØ:")
            print(f"   ÂêçÁß∞:      {about['name']}")
            print(f"   ÂÆåÊï¥ÂêçÁß∞:  {about['full_name']}")
            print(f"   ‰æõÂ∫îÂïÜ:    {about['vendor']}")
            print(f"   ÁâàÊú¨:      {about['version']}")
            print(f"   ÊûÑÂª∫Âè∑:    {about['build']}")
            print(f"   APIÁ±ªÂûã:   {about['api_type']}")
            print(f"   APIÁâàÊú¨:   {about['api_version']}")
            print(f"   ÂÆû‰æãUUID:  {about['instance_uuid']}")

            self.test_results.append(("ÁâàÊú¨‰ø°ÊÅØ", True, about["version"]))
            return True

        except Exception as e:
            print(f"‚ùå Ëé∑ÂèñÂ§±Ë¥•: {e}")
            self.test_results.append(("ÁâàÊú¨‰ø°ÊÅØ", False, str(e)))
            return False

    def test_datacenters(self) -> bool:
        """ÊµãËØï3: Ëé∑ÂèñÊï∞ÊçÆ‰∏≠ÂøÉ"""
        self.print_section("ÊµãËØï3: Ëé∑ÂèñÊï∞ÊçÆ‰∏≠ÂøÉÂàóË°®")

        try:
            start_time = time.time()
            datacenters = self.client.get_datacenters()
            query_time = time.time() - start_time

            print(f"‚úÖ ÊàêÂäüËé∑Âèñ {len(datacenters)} ‰∏™Êï∞ÊçÆ‰∏≠ÂøÉ (ËÄóÊó∂: {query_time:.2f}s):")

            for i, dc in enumerate(datacenters, 1):
                print(f"   {i}. {dc.name}")

            self.test_results.append(("Êï∞ÊçÆ‰∏≠ÂøÉ", True, f"{len(datacenters)} ‰∏™"))
            return True

        except Exception as e:
            print(f"‚ùå Ëé∑ÂèñÂ§±Ë¥•: {e}")
            self.test_results.append(("Êï∞ÊçÆ‰∏≠ÂøÉ", False, str(e)))
            return False

    def test_clusters(self) -> bool:
        """ÊµãËØï4: Ëé∑ÂèñÈõÜÁæ§"""
        self.print_section("ÊµãËØï4: Ëé∑ÂèñÈõÜÁæ§ÂàóË°®")

        try:
            start_time = time.time()
            clusters = self.client.get_clusters()
            query_time = time.time() - start_time

            print(f"‚úÖ ÊàêÂäüËé∑Âèñ {len(clusters)} ‰∏™ÈõÜÁæ§ (ËÄóÊó∂: {query_time:.2f}s):")

            for i, cluster in enumerate(clusters[:20], 1):  # ÊúÄÂ§öÊòæÁ§∫20‰∏™
                # Ëé∑ÂèñÈõÜÁæ§ÊëòË¶Å‰ø°ÊÅØ
                total_cpu = cluster.summary.numCpuCores if hasattr(cluster.summary, "numCpuCores") else 0
                total_hosts = cluster.summary.numHosts if hasattr(cluster.summary, "numHosts") else 0
                print(f"   {i}. {cluster.name} (‰∏ªÊú∫: {total_hosts}, CPUÊ†∏ÂøÉ: {total_cpu})")

            if len(clusters) > 20:
                print(f"   ... ËøòÊúâ {len(clusters) - 20} ‰∏™ÈõÜÁæ§Êú™ÊòæÁ§∫")

            self.test_results.append(("ÈõÜÁæ§", True, f"{len(clusters)} ‰∏™"))
            return True

        except Exception as e:
            print(f"‚ùå Ëé∑ÂèñÂ§±Ë¥•: {e}")
            self.test_results.append(("ÈõÜÁæ§", False, str(e)))
            return False

    def test_hosts(self) -> bool:
        """ÊµãËØï5: Ëé∑Âèñ ESXi ‰∏ªÊú∫"""
        self.print_section("ÊµãËØï5: Ëé∑Âèñ ESXi ‰∏ªÊú∫ÂàóË°®")

        try:
            start_time = time.time()
            hosts = self.client.get_hosts()
            query_time = time.time() - start_time

            print(f"‚úÖ ÊàêÂäüËé∑Âèñ {len(hosts)} ‰∏™ ESXi ‰∏ªÊú∫ (ËÄóÊó∂: {query_time:.2f}s):")

            for i, host in enumerate(hosts[:20], 1):  # ÊúÄÂ§öÊòæÁ§∫20‰∏™
                # Ëé∑Âèñ‰∏ªÊú∫ËØ¶ÁªÜ‰ø°ÊÅØ
                try:
                    hw = host.hardware
                    cpu_cores = hw.cpuInfo.numCpuCores
                    memory_gb = hw.memorySize / (1024**3)
                    connection_state = host.runtime.connectionState
                    power_state = host.runtime.powerState

                    print(f"   {i}. {host.name}")
                    print(f"      - CPU: {cpu_cores} Ê†∏")
                    print(f"      - ÂÜÖÂ≠ò: {memory_gb:.1f} GB")
                    print(f"      - ËøûÊé•Áä∂ÊÄÅ: {connection_state}")
                    print(f"      - ÁîµÊ∫êÁä∂ÊÄÅ: {power_state}")
                except Exception as e:
                    print(f"   {i}. {host.name} (ËØ¶ÊÉÖËé∑ÂèñÂ§±Ë¥•: {e})")

            if len(hosts) > 20:
                print(f"   ... ËøòÊúâ {len(hosts) - 20} ‰∏™‰∏ªÊú∫Êú™ÊòæÁ§∫")

            self.test_results.append(("ESXi‰∏ªÊú∫", True, f"{len(hosts)} ‰∏™"))
            return True

        except Exception as e:
            print(f"‚ùå Ëé∑ÂèñÂ§±Ë¥•: {e}")
            self.test_results.append(("ESXi‰∏ªÊú∫", False, str(e)))
            return False

    def test_vms(self) -> bool:
        """ÊµãËØï6: Ëé∑ÂèñËôöÊãüÊú∫"""
        self.print_section("ÊµãËØï6: Ëé∑ÂèñËôöÊãüÊú∫ÂàóË°®")

        try:
            start_time = time.time()
            vms = self.client.get_vms()
            query_time = time.time() - start_time

            print(f"‚úÖ ÊàêÂäüËé∑Âèñ {len(vms)} ‰∏™ËôöÊãüÊú∫ (ËÄóÊó∂: {query_time:.2f}s):")

            # ÁªüËÆ°Áä∂ÊÄÅ
            power_on = sum(1 for vm in vms if vm.runtime.powerState == "poweredOn")
            power_off = sum(1 for vm in vms if vm.runtime.powerState == "poweredOff")
            suspended = sum(1 for vm in vms if vm.runtime.powerState == "suspended")

            print(f"\n   Áä∂ÊÄÅÁªüËÆ°:")
            print(f"   - ËøêË°å‰∏≠: {power_on}")
            print(f"   - Â∑≤ÂÖ≥Êú∫: {power_off}")
            print(f"   - Â∑≤ÊåÇËµ∑: {suspended}")

            print(f"\n   ËôöÊãüÊú∫ËØ¶ÊÉÖ (Ââç20‰∏™):")
            for i, vm in enumerate(vms[:20], 1):
                try:
                    power_state = vm.runtime.powerState
                    cpu = vm.config.hardware.numCPU if vm.config else 0
                    memory_mb = vm.config.hardware.memoryMB if vm.config else 0
                    guest_os = vm.config.guestFullName if vm.config else "Unknown"

                    # ÂõæÊ†áË°®Á§∫Áä∂ÊÄÅ
                    status_icon = "üü¢" if power_state == "poweredOn" else "üî¥" if power_state == "poweredOff" else "üü°"

                    print(f"   {i}. {status_icon} {vm.name}")
                    print(f"      - CPU: {cpu} vCPU, ÂÜÖÂ≠ò: {memory_mb} MB")
                    print(f"      - Êìç‰ΩúÁ≥ªÁªü: {guest_os}")
                    print(f"      - Áä∂ÊÄÅ: {power_state}")
                except Exception as e:
                    print(f"   {i}. {vm.name} (ËØ¶ÊÉÖËé∑ÂèñÂ§±Ë¥•)")

            if len(vms) > 20:
                print(f"   ... ËøòÊúâ {len(vms) - 20} ‰∏™ËôöÊãüÊú∫Êú™ÊòæÁ§∫")

            self.test_results.append(("ËôöÊãüÊú∫", True, f"{len(vms)} ‰∏™"))
            return True

        except Exception as e:
            print(f"‚ùå Ëé∑ÂèñÂ§±Ë¥•: {e}")
            self.test_results.append(("ËôöÊãüÊú∫", False, str(e)))
            return False

    def test_datastores(self) -> bool:
        """ÊµãËØï7: Ëé∑ÂèñÊï∞ÊçÆÂ≠òÂÇ®"""
        self.print_section("ÊµãËØï7: Ëé∑ÂèñÊï∞ÊçÆÂ≠òÂÇ®ÂàóË°®")

        try:
            start_time = time.time()
            datastores = self.client.get_datastores()
            query_time = time.time() - start_time

            print(f"‚úÖ ÊàêÂäüËé∑Âèñ {len(datastores)} ‰∏™Êï∞ÊçÆÂ≠òÂÇ® (ËÄóÊó∂: {query_time:.2f}s):")

            # ËÆ°ÁÆóÊÄªÂÆπÈáè
            total_capacity = 0
            total_free = 0

            for i, ds in enumerate(datastores[:20], 1):
                try:
                    capacity_gb = ds.summary.capacity / (1024**3)
                    free_gb = ds.summary.freeSpace / (1024**3)
                    used_gb = capacity_gb - free_gb
                    used_percent = (used_gb / capacity_gb * 100) if capacity_gb > 0 else 0
                    ds_type = ds.summary.type
                    accessible = "‚úÖ" if ds.summary.accessible else "‚ùå"

                    total_capacity += capacity_gb
                    total_free += free_gb

                    print(f"   {i}. {ds.name} ({ds_type}) {accessible}")
                    print(f"      - ÂÆπÈáè: {capacity_gb:.1f} GB")
                    print(f"      - Â∑≤Áî®: {used_gb:.1f} GB ({used_percent:.1f}%)")
                    print(f"      - ÂèØÁî®: {free_gb:.1f} GB")
                except Exception as e:
                    print(f"   {i}. {ds.name} (ËØ¶ÊÉÖËé∑ÂèñÂ§±Ë¥•)")

            if len(datastores) > 20:
                print(f"   ... ËøòÊúâ {len(datastores) - 20} ‰∏™Êï∞ÊçÆÂ≠òÂÇ®Êú™ÊòæÁ§∫")

            print(f"\n   ÊÄªÂÆπÈáèÁªüËÆ°:")
            print(f"   - ÊÄªÂÆπÈáè: {total_capacity:.1f} GB")
            print(f"   - Â∑≤Áî®: {total_capacity - total_free:.1f} GB")
            print(f"   - ÂèØÁî®: {total_free:.1f} GB")

            self.test_results.append(("Êï∞ÊçÆÂ≠òÂÇ®", True, f"{len(datastores)} ‰∏™"))
            return True

        except Exception as e:
            print(f"‚ùå Ëé∑ÂèñÂ§±Ë¥•: {e}")
            self.test_results.append(("Êï∞ÊçÆÂ≠òÂÇ®", False, str(e)))
            return False

    def test_networks(self) -> bool:
        """ÊµãËØï8: Ëé∑ÂèñÁΩëÁªú"""
        self.print_section("ÊµãËØï8: Ëé∑ÂèñÁΩëÁªúÂàóË°®")

        try:
            start_time = time.time()
            networks = self.client.get_networks()
            query_time = time.time() - start_time

            print(f"‚úÖ ÊàêÂäüËé∑Âèñ {len(networks)} ‰∏™ÁΩëÁªú (ËÄóÊó∂: {query_time:.2f}s):")

            for i, network in enumerate(networks[:20], 1):
                print(f"   {i}. {network.name}")

            if len(networks) > 20:
                print(f"   ... ËøòÊúâ {len(networks) - 20} ‰∏™ÁΩëÁªúÊú™ÊòæÁ§∫")

            self.test_results.append(("ÁΩëÁªú", True, f"{len(networks)} ‰∏™"))
            return True

        except Exception as e:
            print(f"‚ùå Ëé∑ÂèñÂ§±Ë¥•: {e}")
            self.test_results.append(("ÁΩëÁªú", False, str(e)))
            return False

    def test_vm_details(self, vm_name: Optional[str] = None) -> bool:
        """ÊµãËØï9: Ëé∑ÂèñËôöÊãüÊú∫ËØ¶ÁªÜ‰ø°ÊÅØ"""
        self.print_section("ÊµãËØï9: Ëé∑ÂèñËôöÊãüÊú∫ËØ¶ÁªÜ‰ø°ÊÅØ")

        try:
            vms = self.client.get_vms()

            if not vms:
                print("‚ö†Ô∏è Ê≤°ÊúâÊâæÂà∞ËôöÊãüÊú∫")
                return True

            # ÈÄâÊã©‰∏Ä‰∏™ËôöÊãüÊú∫
            if vm_name:
                target_vm = next((vm for vm in vms if vm.name == vm_name), None)
                if not target_vm:
                    print(f"‚ö†Ô∏è Êú™ÊâæÂà∞ËôöÊãüÊú∫: {vm_name}")
                    target_vm = vms[0]
            else:
                target_vm = vms[0]

            print(f"\nËôöÊãüÊú∫: {target_vm.name}")
            print(f"{'-' * 80}")

            # Âü∫Êú¨‰ø°ÊÅØ
            print(f"\nüìå Âü∫Êú¨‰ø°ÊÅØ:")
            print(f"   UUID: {target_vm.config.uuid if target_vm.config else 'N/A'}")
            print(f"   ÂÆû‰æãUUID: {target_vm.config.instanceUuid if target_vm.config else 'N/A'}")
            print(f"   ÁîµÊ∫êÁä∂ÊÄÅ: {target_vm.runtime.powerState}")
            print(f"   ËøûÊé•Áä∂ÊÄÅ: {target_vm.runtime.connectionState}")

            # Á°¨‰ª∂ÈÖçÁΩÆ
            if target_vm.config:
                print(f"\nüíª Á°¨‰ª∂ÈÖçÁΩÆ:")
                print(f"   CPU: {target_vm.config.hardware.numCPU} vCPU")
                print(f"   ÂÜÖÂ≠ò: {target_vm.config.hardware.memoryMB} MB")
                print(f"   Á°¨‰ª∂ÁâàÊú¨: {target_vm.config.version}")

            # Êìç‰ΩúÁ≥ªÁªü
            if target_vm.guest:
                print(f"\nüñ•Ô∏è Êìç‰ΩúÁ≥ªÁªü:")
                print(f"   Guest ID: {target_vm.config.guestId if target_vm.config else 'N/A'}")
                print(f"   ÂÆåÊï¥ÂêçÁß∞: {target_vm.config.guestFullName if target_vm.config else 'N/A'}")
                print(f"   Guest Áä∂ÊÄÅ: {target_vm.guest.guestState}")
                print(f"   IP Âú∞ÂùÄ: {target_vm.guest.ipAddress if target_vm.guest.ipAddress else 'N/A'}")
                print(f"   ‰∏ªÊú∫Âêç: {target_vm.guest.hostName if target_vm.guest.hostName else 'N/A'}")

            # Á£ÅÁõò‰ø°ÊÅØ
            if target_vm.config and target_vm.config.hardware:
                disks = [dev for dev in target_vm.config.hardware.device if isinstance(dev, vim.vm.device.VirtualDisk)]

                if disks:
                    print(f"\nüíæ Á£ÅÁõò‰ø°ÊÅØ ({len(disks)} ‰∏™):")
                    for disk in disks:
                        capacity_gb = disk.capacityInKB / (1024**2)
                        print(f"   - {disk.deviceInfo.label}: {capacity_gb:.1f} GB")

            # ÁΩëÁªú‰ø°ÊÅØ
            if target_vm.config and target_vm.config.hardware:
                nics = [
                    dev
                    for dev in target_vm.config.hardware.device
                    if isinstance(dev, vim.vm.device.VirtualEthernetCard)
                ]

                if nics:
                    print(f"\nüåê ÁΩëÁªúÊé•Âè£ ({len(nics)} ‰∏™):")
                    for nic in nics:
                        network_name = nic.backing.network.name if hasattr(nic.backing, "network") else "N/A"
                        mac = nic.macAddress if hasattr(nic, "macAddress") else "N/A"
                        print(f"   - {nic.deviceInfo.label}: {mac} ({network_name})")

            # Âø´ÁÖß‰ø°ÊÅØ
            if target_vm.snapshot:
                print(f"\nüì∏ Âø´ÁÖß‰ø°ÊÅØ:")
                print(
                    f"   ÂΩìÂâçÂø´ÁÖß: {target_vm.snapshot.currentSnapshot.name if target_vm.snapshot.currentSnapshot else 'None'}"
                )

                def count_snapshots(snapshot_tree):
                    count = len(snapshot_tree)
                    for tree in snapshot_tree:
                        if hasattr(tree, "childSnapshotList"):
                            count += count_snapshots(tree.childSnapshotList)
                    return count

                total_snapshots = count_snapshots(target_vm.snapshot.rootSnapshotList)
                print(f"   Âø´ÁÖßÊÄªÊï∞: {total_snapshots}")

            self.test_results.append(("ËôöÊãüÊú∫ËØ¶ÊÉÖ", True, target_vm.name))
            return True

        except Exception as e:
            print(f"‚ùå Ëé∑ÂèñÂ§±Ë¥•: {e}")
            self.test_results.append(("ËôöÊãüÊú∫ËØ¶ÊÉÖ", False, str(e)))
            return False

    def test_host_details(self) -> bool:
        """ÊµãËØï10: Ëé∑Âèñ‰∏ªÊú∫ËØ¶ÁªÜ‰ø°ÊÅØ"""
        self.print_section("ÊµãËØï10: Ëé∑Âèñ‰∏ªÊú∫ËØ¶ÁªÜ‰ø°ÊÅØ")

        try:
            hosts = self.client.get_hosts()

            if not hosts:
                print("‚ö†Ô∏è Ê≤°ÊúâÊâæÂà∞‰∏ªÊú∫")
                return True

            target_host = hosts[0]

            print(f"\n‰∏ªÊú∫: {target_host.name}")
            print(f"{'-' * 80}")

            # Á°¨‰ª∂‰ø°ÊÅØ
            hw = target_host.hardware
            print(f"\nüñ•Ô∏è Á°¨‰ª∂‰ø°ÊÅØ:")
            print(f"   CPU:")
            print(f"     - ÂûãÂè∑: {hw.cpuInfo.model if hasattr(hw.cpuInfo, 'model') else 'N/A'}")
            print(f"     - ÊèíÊßΩÊï∞: {hw.cpuInfo.numCpuPackages}")
            print(f"     - Ê†∏ÂøÉÊï∞: {hw.cpuInfo.numCpuCores}")
            print(f"     - Á∫øÁ®ãÊï∞: {hw.cpuInfo.numCpuThreads}")
            print(f"     - È¢ëÁéá: {hw.cpuInfo.hz / 1000000:.0f} MHz")
            print(f"   ÂÜÖÂ≠ò: {hw.memorySize / (1024**3):.1f} GB")

            # ËøêË°åÊó∂‰ø°ÊÅØ
            print(f"\nüìä ËøêË°åÊó∂‰ø°ÊÅØ:")
            print(f"   ËøûÊé•Áä∂ÊÄÅ: {target_host.runtime.connectionState}")
            print(f"   ÁîµÊ∫êÁä∂ÊÄÅ: {target_host.runtime.powerState}")
            print(f"   ÂêØÂä®Êó∂Èó¥: {target_host.runtime.bootTime if target_host.runtime.bootTime else 'N/A'}")

            # ËôöÊãüÊú∫ÁªüËÆ°
            vm_count = len(target_host.vm) if target_host.vm else 0
            print(f"   ËôöÊãüÊú∫Êï∞Èáè: {vm_count}")

            # ÁΩëÁªú‰ø°ÊÅØ
            if hasattr(target_host.config, "network"):
                vnics = target_host.config.network.vnic if target_host.config.network else []
                print(f"\nüåê ÁΩëÁªúÊé•Âè£ ({len(vnics)} ‰∏™):")
                for vnic in vnics[:5]:
                    print(f"   - {vnic.device}: {vnic.spec.ip.ipAddress if vnic.spec.ip else 'N/A'}")

            self.test_results.append(("‰∏ªÊú∫ËØ¶ÊÉÖ", True, target_host.name))
            return True

        except Exception as e:
            print(f"‚ùå Ëé∑ÂèñÂ§±Ë¥•: {e}")
            self.test_results.append(("‰∏ªÊú∫ËØ¶ÊÉÖ", False, str(e)))
            return False

    def print_summary(self):
        """ÊâìÂç∞ÊµãËØïÊÄªÁªì"""
        self.print_header("ÊµãËØïÊÄªÁªì")

        total = len(self.test_results)
        passed = sum(1 for _, success, _ in self.test_results if success)
        failed = total - passed

        print(f"\nÊÄªËÆ°: {total} ‰∏™ÊµãËØï")
        print(f"ÈÄöËøá: {passed} ‰∏™ ‚úÖ")
        print(f"Â§±Ë¥•: {failed} ‰∏™ ‚ùå")

        print(f"\nËØ¶ÁªÜÁªìÊûú:")
        for name, success, detail in self.test_results:
            status = "‚úÖ ÈÄöËøá" if success else "‚ùå Â§±Ë¥•"
            print(f"  {status} - {name}: {detail}")

        print(f"\n{'=' * 80}\n")

        return failed == 0

    def run_all_tests(self) -> bool:
        """ËøêË°åÊâÄÊúâÊµãËØï"""
        self.print_header("vSphere ÂÆ¢Êà∑Á´ØÁúüÂÆûÁéØÂ¢ÉÊµãËØï")

        try:
            # ÊµãËØï1: ËøûÊé•
            if not self.test_connection():
                print("\n‚ö†Ô∏è ËøûÊé•Â§±Ë¥•ÔºåË∑≥ËøáÂêéÁª≠ÊµãËØï")
                return False

            # ÊµãËØï2-8: ÂêÑÁßçËµÑÊ∫êËé∑Âèñ
            self.test_about_info()
            self.test_datacenters()
            self.test_clusters()
            self.test_hosts()
            self.test_vms()
            self.test_datastores()
            self.test_networks()

            # ÊµãËØï9-10: ËØ¶ÁªÜ‰ø°ÊÅØ
            self.test_vm_details()
            self.test_host_details()

            # ÊâìÂç∞ÊÄªÁªì
            return self.print_summary()

        finally:
            # Á°Æ‰øùÊñ≠ÂºÄËøûÊé•
            if self.client.is_connected:
                self.client.disconnect()
                print("‚úÖ Â∑≤Êñ≠ÂºÄËøûÊé•")


def main():
    """‰∏ªÂáΩÊï∞"""
    parser = argparse.ArgumentParser(description="vSphere ÂÆ¢Êà∑Á´ØÁúüÂÆûÁéØÂ¢ÉÊµãËØï")
    parser.add_argument("--host", help="vCenter/ESXi Âú∞ÂùÄÔºà‰∏çÂê´ https://Ôºâ")
    parser.add_argument("--username", help="Áî®Êà∑Âêç")
    parser.add_argument("--password", help="ÂØÜÁ†Å")
    parser.add_argument("--port", type=int, default=443, help="Á´ØÂè£ÔºàÈªòËÆ§ 443Ôºâ")
    parser.add_argument("--ssl-verify", action="store_true", help="È™åËØÅ SSL ËØÅ‰π¶")
    parser.add_argument("--vm-name", help="ÊåáÂÆöË¶ÅÊü•ÁúãËØ¶ÊÉÖÁöÑËôöÊãüÊú∫ÂêçÁß∞")

    args = parser.parse_args()

    # ‰ªéÁéØÂ¢ÉÂèòÈáèÊàñÂëΩ‰ª§Ë°åÂèÇÊï∞Ëé∑ÂèñÈÖçÁΩÆ
    host = args.host or os.environ.get("VSPHERE_TEST_HOST")
    username = args.username or os.environ.get("VSPHERE_TEST_USERNAME")
    password = args.password or os.environ.get("VSPHERE_TEST_PASSWORD")

    # È™åËØÅÂøÖÈúÄÂèÇÊï∞
    if not all([host, username, password]):
        print("‚ùå ÈîôËØØ: Áº∫Â∞ëÂøÖÈúÄÂèÇÊï∞\n")
        print("ËØ∑ÈÄöËøá‰ª•‰∏ãÊñπÂºè‰πã‰∏ÄÊèê‰æõ vSphere ËøûÊé•‰ø°ÊÅØÔºö\n")
        print("ÊñπÂºè1: ÂëΩ‰ª§Ë°åÂèÇÊï∞")
        print("  uv run test_vsphere_real.py --host 10.10.100.20 --username admin@vsphere.local --password 'your_pass'")
        print("\nÊñπÂºè2: ÁéØÂ¢ÉÂèòÈáè")
        print("  export VSPHERE_TEST_HOST='10.10.100.20'")
        print("  export VSPHERE_TEST_USERNAME='administrator@vsphere.local'")
        print("  export VSPHERE_TEST_PASSWORD='your_password'")
        print("  uv run test_vsphere_real.py")
        print("\nÊ≥®ÊÑè:")
        print("  - host ÂèÇÊï∞‰∏çË¶ÅÂåÖÂê´ https:// ÂâçÁºÄ")
        print("  - Ëá™Á≠æÂêçËØÅ‰π¶ÁéØÂ¢É‰∏çÈúÄË¶Å --ssl-verify ÂèÇÊï∞")
        return False

    # ÊòæÁ§∫ËøûÊé•‰ø°ÊÅØ
    print("\nËøûÊé•‰ø°ÊÅØ:")
    print(f"  ‰∏ªÊú∫: {host}")
    print(f"  Á´ØÂè£: {args.port}")
    print(f"  Áî®Êà∑: {username}")
    print(f"  SSLÈ™åËØÅ: {'ÊòØ' if args.ssl_verify else 'Âê¶'}")

    # ÂàõÂª∫ÊµãËØïÂÆû‰æãÂπ∂ËøêË°å
    tester = VSphereRealTest(
        host=host,
        username=username,
        password=password,
        port=args.port,
        ssl_verify=args.ssl_verify,
    )

    success = tester.run_all_tests()

    # ËøîÂõûÈÄÄÂá∫Á†Å
    sys.exit(0 if success else 1)


if __name__ == "__main__":
    main()
