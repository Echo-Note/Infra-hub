# Generated by Django 5.2.7 on 2025-10-27 09:55

import uuid

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models

import apps.common.fields.encrypted


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("system", "0003_userloginlog_channel_name_and_more"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Host",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(auto_now_add=True, null=True, verbose_name="Created time")),
                ("updated_time", models.DateTimeField(auto_now=True, null=True, verbose_name="Updated time")),
                ("description", models.CharField(blank=True, max_length=256, null=True, verbose_name="Description")),
                (
                    "name",
                    models.CharField(db_index=True, help_text="ESXi 主机名称", max_length=128, verbose_name="主机名称"),
                ),
                (
                    "hostname",
                    models.CharField(
                        blank=True, help_text="完整域名 FQDN", max_length=256, null=True, verbose_name="主机域名"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(db_index=True, help_text="ESXi 管理 IP 地址", verbose_name="IP 地址"),
                ),
                (
                    "mo_ref",
                    models.CharField(
                        blank=True,
                        help_text="vSphere Managed Object Reference ID",
                        max_length=128,
                        null=True,
                        verbose_name="MO 引用",
                    ),
                ),
                (
                    "uuid",
                    models.CharField(
                        blank=True,
                        help_text="ESXi 主机硬件 UUID",
                        max_length=128,
                        null=True,
                        unique=True,
                        verbose_name="硬件 UUID",
                    ),
                ),
                (
                    "cluster_name",
                    models.CharField(
                        blank=True, help_text="所属 vSphere 集群", max_length=128, null=True, verbose_name="集群名称"
                    ),
                ),
                (
                    "datacenter_name",
                    models.CharField(
                        blank=True,
                        help_text="所属 vSphere 数据中心",
                        max_length=128,
                        null=True,
                        verbose_name="数据中心",
                    ),
                ),
                (
                    "status",
                    models.SmallIntegerField(
                        choices=[(0, "离线"), (1, "在线"), (2, "维护中"), (3, "异常"), (4, "待机"), (5, "未知")],
                        default=0,
                        help_text="主机运行状态",
                        verbose_name="运行状态",
                    ),
                ),
                (
                    "power_state",
                    models.CharField(
                        choices=[
                            ("poweredOn", "已开机"),
                            ("poweredOff", "已关机"),
                            ("standBy", "待机"),
                            ("unknown", "未知"),
                        ],
                        default="unknown",
                        help_text="主机电源状态",
                        max_length=32,
                        verbose_name="电源状态",
                    ),
                ),
                (
                    "connection_state",
                    models.CharField(
                        blank=True, help_text="vCenter 连接状态", max_length=64, null=True, verbose_name="连接状态"
                    ),
                ),
                (
                    "vendor",
                    models.CharField(
                        blank=True, help_text="服务器硬件厂商", max_length=128, null=True, verbose_name="硬件厂商"
                    ),
                ),
                (
                    "model",
                    models.CharField(
                        blank=True, help_text="服务器型号", max_length=128, null=True, verbose_name="服务器型号"
                    ),
                ),
                (
                    "esxi_version",
                    models.CharField(
                        blank=True, help_text="ESXi 版本号", max_length=64, null=True, verbose_name="ESXi 版本"
                    ),
                ),
                (
                    "esxi_build",
                    models.CharField(
                        blank=True, help_text="ESXi 构建号", max_length=64, null=True, verbose_name="ESXi 构建号"
                    ),
                ),
                (
                    "cpu_model",
                    models.CharField(
                        blank=True, help_text="处理器型号", max_length=256, null=True, verbose_name="CPU 型号"
                    ),
                ),
                ("cpu_cores", models.IntegerField(default=0, help_text="物理 CPU 核心总数", verbose_name="CPU 核心数")),
                (
                    "cpu_threads",
                    models.IntegerField(default=0, help_text="逻辑 CPU 线程总数", verbose_name="CPU 线程数"),
                ),
                (
                    "cpu_sockets",
                    models.IntegerField(default=0, help_text="物理 CPU 插槽数量", verbose_name="CPU 插槽数"),
                ),
                (
                    "cpu_frequency",
                    models.IntegerField(default=0, help_text="CPU 频率，单位 MHz", verbose_name="CPU 频率"),
                ),
                (
                    "memory_total",
                    models.BigIntegerField(default=0, help_text="总内存大小，单位 MB", verbose_name="总内存"),
                ),
                (
                    "vm_count",
                    models.IntegerField(default=0, help_text="该主机上运行的虚拟机数量", verbose_name="虚拟机数量"),
                ),
                (
                    "cpu_usage",
                    models.FloatField(
                        default=0.0,
                        help_text="CPU 使用率百分比",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="CPU 使用率",
                    ),
                ),
                (
                    "memory_usage",
                    models.FloatField(
                        default=0.0,
                        help_text="内存使用率百分比",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="内存使用率",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(db_index=True, default=True, help_text="是否启用管理", verbose_name="启用状态"),
                ),
                (
                    "in_maintenance",
                    models.BooleanField(default=False, help_text="是否处于维护模式", verbose_name="维护模式"),
                ),
                ("tags", models.JSONField(blank=True, default=list, help_text="自定义标签列表", verbose_name="标签")),
                (
                    "extra_info",
                    models.JSONField(blank=True, default=dict, help_text="其他扩展信息", verbose_name="扩展信息"),
                ),
                (
                    "last_seen",
                    models.DateTimeField(blank=True, help_text="最后一次在线时间", null=True, verbose_name="最后在线"),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="creator_query",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator",
                    ),
                ),
                (
                    "dept_belong",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="dept_belong_query",
                        to="system.deptinfo",
                        verbose_name="Data ownership department",
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="modifier_query",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifier",
                    ),
                ),
            ],
            options={
                "verbose_name": "ESXi 主机",
                "verbose_name_plural": "ESXi 主机",
                "db_table": "virt_host",
                "ordering": ["-created_time"],
            },
        ),
        migrations.CreateModel(
            name="HostResource",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "cpu_used_mhz",
                    models.IntegerField(default=0, help_text="已使用的 CPU 频率，单位 MHz", verbose_name="CPU 已用"),
                ),
                (
                    "cpu_total_mhz",
                    models.IntegerField(default=0, help_text="总 CPU 频率，单位 MHz", verbose_name="CPU 总量"),
                ),
                (
                    "cpu_reserved_mhz",
                    models.IntegerField(default=0, help_text="预留的 CPU 频率，单位 MHz", verbose_name="CPU 预留"),
                ),
                (
                    "memory_used",
                    models.BigIntegerField(default=0, help_text="已使用内存，单位 MB", verbose_name="已用内存"),
                ),
                (
                    "memory_free",
                    models.BigIntegerField(default=0, help_text="空闲内存，单位 MB", verbose_name="空闲内存"),
                ),
                (
                    "memory_active",
                    models.BigIntegerField(default=0, help_text="活动内存，单位 MB", verbose_name="活动内存"),
                ),
                (
                    "memory_consumed",
                    models.BigIntegerField(default=0, help_text="虚拟机消耗内存，单位 MB", verbose_name="消耗内存"),
                ),
                (
                    "storage_total",
                    models.BigIntegerField(default=0, help_text="总存储容量，单位 GB", verbose_name="总存储"),
                ),
                (
                    "storage_used",
                    models.BigIntegerField(default=0, help_text="已使用存储，单位 GB", verbose_name="已用存储"),
                ),
                (
                    "storage_free",
                    models.BigIntegerField(default=0, help_text="空闲存储，单位 GB", verbose_name="空闲存储"),
                ),
                (
                    "storage_uncommitted",
                    models.BigIntegerField(default=0, help_text="未提交的存储空间，单位 GB", verbose_name="未提交存储"),
                ),
                (
                    "network_rx_bytes",
                    models.BigIntegerField(default=0, help_text="网络接收字节数", verbose_name="网络接收"),
                ),
                (
                    "network_tx_bytes",
                    models.BigIntegerField(default=0, help_text="网络发送字节数", verbose_name="网络发送"),
                ),
                (
                    "network_rx_packets",
                    models.BigIntegerField(default=0, help_text="网络接收包数", verbose_name="接收包数"),
                ),
                (
                    "network_tx_packets",
                    models.BigIntegerField(default=0, help_text="网络发送包数", verbose_name="发送包数"),
                ),
                (
                    "uptime_seconds",
                    models.BigIntegerField(default=0, help_text="运行时长，单位秒", verbose_name="运行时长"),
                ),
                (
                    "updated_time",
                    models.DateTimeField(auto_now=True, help_text="资源信息最后更新时间", verbose_name="更新时间"),
                ),
                (
                    "host",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="resource",
                        to="virt_center.host",
                        verbose_name="所属主机",
                    ),
                ),
            ],
            options={
                "verbose_name": "主机资源详情",
                "verbose_name_plural": "主机资源详情",
                "db_table": "virt_host_resource",
            },
        ),
        migrations.CreateModel(
            name="Platform",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(auto_now_add=True, null=True, verbose_name="Created time")),
                ("updated_time", models.DateTimeField(auto_now=True, null=True, verbose_name="Updated time")),
                ("description", models.CharField(blank=True, max_length=256, null=True, verbose_name="Description")),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="虚拟化平台的显示名称",
                        max_length=128,
                        unique=True,
                        verbose_name="平台名称",
                    ),
                ),
                (
                    "platform_type",
                    models.CharField(
                        choices=[
                            ("vcenter", "VMware vCenter"),
                            ("esxi", "VMware ESXi"),
                            ("kvm", "KVM"),
                            ("proxmox", "Proxmox VE"),
                        ],
                        db_index=True,
                        default="vcenter",
                        help_text="虚拟化平台类型，推荐使用 vCenter 管理多台 ESXi",
                        max_length=32,
                        verbose_name="平台类型",
                    ),
                ),
                (
                    "host",
                    models.CharField(
                        help_text="vCenter/ESXi 的 IP 地址或域名", max_length=256, verbose_name="主机地址"
                    ),
                ),
                (
                    "port",
                    models.IntegerField(
                        default=443, help_text="vCenter/ESXi HTTPS 端口，默认 443", verbose_name="端口"
                    ),
                ),
                ("is_ssl", models.BooleanField(default=True, help_text="是否使用 HTTPS 连接", verbose_name="启用 SSL")),
                (
                    "ssl_verify",
                    models.BooleanField(
                        default=False, help_text="是否验证 SSL 证书有效性", verbose_name="验证 SSL 证书"
                    ),
                ),
                (
                    "status",
                    models.SmallIntegerField(
                        choices=[(0, "未连接"), (1, "已连接"), (2, "连接异常"), (3, "维护中")],
                        db_index=True,
                        default=0,
                        verbose_name="连接状态",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True, default=True, help_text="是否启用该平台", verbose_name="启用状态"
                    ),
                ),
                (
                    "region",
                    models.CharField(
                        blank=True,
                        help_text="数据中心所在区域，如：北京、上海",
                        max_length=64,
                        null=True,
                        verbose_name="所属区域",
                    ),
                ),
                (
                    "datacenter",
                    models.CharField(
                        blank=True, help_text="vSphere 数据中心名称", max_length=128, null=True, verbose_name="数据中心"
                    ),
                ),
                (
                    "version",
                    models.CharField(
                        blank=True, help_text="vSphere 版本号", max_length=64, null=True, verbose_name="版本"
                    ),
                ),
                (
                    "build",
                    models.CharField(
                        blank=True, help_text="vSphere 构建号", max_length=64, null=True, verbose_name="构建号"
                    ),
                ),
                (
                    "tags",
                    models.JSONField(blank=True, default=dict, help_text="自定义标签，JSON 格式", verbose_name="标签"),
                ),
                (
                    "extra_config",
                    models.JSONField(
                        blank=True, default=dict, help_text="额外配置信息，JSON 格式", verbose_name="扩展配置"
                    ),
                ),
                (
                    "total_hosts",
                    models.IntegerField(default=0, help_text="该平台下的 ESXi 主机总数", verbose_name="主机总数"),
                ),
                (
                    "total_vms",
                    models.IntegerField(default=0, help_text="该平台下的虚拟机总数", verbose_name="虚拟机总数"),
                ),
                (
                    "total_clusters",
                    models.IntegerField(default=0, help_text="vSphere 集群总数", verbose_name="集群总数"),
                ),
                (
                    "last_sync_time",
                    models.DateTimeField(
                        blank=True, help_text="最后一次同步数据的时间", null=True, verbose_name="最后同步时间"
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="creator_query",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator",
                    ),
                ),
                (
                    "dept_belong",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="dept_belong_query",
                        to="system.deptinfo",
                        verbose_name="Data ownership department",
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="modifier_query",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifier",
                    ),
                ),
            ],
            options={
                "verbose_name": "虚拟化平台",
                "verbose_name_plural": "虚拟化平台",
                "db_table": "virt_platform",
                "ordering": ["-created_time"],
            },
        ),
        migrations.AddField(
            model_name="host",
            name="platform",
            field=models.ForeignKey(
                help_text="所属的 vCenter 平台",
                on_delete=django.db.models.deletion.CASCADE,
                related_name="hosts",
                to="virt_center.platform",
                verbose_name="所属平台",
            ),
        ),
        migrations.CreateModel(
            name="DataStore",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(auto_now_add=True, null=True, verbose_name="Created time")),
                ("updated_time", models.DateTimeField(auto_now=True, null=True, verbose_name="Updated time")),
                ("description", models.CharField(blank=True, max_length=256, null=True, verbose_name="Description")),
                (
                    "name",
                    models.CharField(
                        db_index=True, help_text="数据存储显示名称", max_length=256, verbose_name="存储名称"
                    ),
                ),
                (
                    "mo_ref",
                    models.CharField(
                        blank=True,
                        help_text="vSphere Managed Object Reference ID",
                        max_length=128,
                        null=True,
                        verbose_name="MO 引用",
                    ),
                ),
                (
                    "url",
                    models.CharField(
                        blank=True, help_text="数据存储URL", max_length=512, null=True, verbose_name="存储 URL"
                    ),
                ),
                (
                    "datastore_type",
                    models.CharField(
                        choices=[
                            ("vmfs", "VMFS"),
                            ("nfs", "NFS"),
                            ("nfs41", "NFS 4.1"),
                            ("vsan", "vSAN"),
                            ("vvol", "vVol"),
                            ("local", "本地存储"),
                        ],
                        help_text="数据存储类型",
                        max_length=32,
                        verbose_name="存储类型",
                    ),
                ),
                (
                    "access_mode",
                    models.CharField(
                        choices=[("readWrite", "读写"), ("readOnly", "只读")],
                        default="readWrite",
                        help_text="访问权限",
                        max_length=32,
                        verbose_name="访问模式",
                    ),
                ),
                (
                    "datacenter_name",
                    models.CharField(
                        blank=True, help_text="所属数据中心", max_length=128, null=True, verbose_name="数据中心"
                    ),
                ),
                (
                    "cluster_name",
                    models.CharField(
                        blank=True, help_text="所属集群", max_length=128, null=True, verbose_name="集群名称"
                    ),
                ),
                ("capacity_gb", models.BigIntegerField(default=0, help_text="总容量，单位 GB", verbose_name="总容量")),
                ("free_gb", models.BigIntegerField(default=0, help_text="可用容量，单位 GB", verbose_name="可用容量")),
                (
                    "uncommitted_gb",
                    models.BigIntegerField(
                        default=0, help_text="未提交的虚拟机磁盘空间，单位 GB", verbose_name="未提交容量"
                    ),
                ),
                (
                    "vm_count",
                    models.IntegerField(default=0, help_text="使用该存储的虚拟机数量", verbose_name="虚拟机数量"),
                ),
                (
                    "usage_percent",
                    models.FloatField(
                        default=0.0,
                        help_text="存储使用率百分比",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="使用率",
                    ),
                ),
                (
                    "nfs_server",
                    models.CharField(
                        blank=True, help_text="NFS 服务器地址", max_length=256, null=True, verbose_name="NFS 服务器"
                    ),
                ),
                (
                    "nfs_path",
                    models.CharField(
                        blank=True, help_text="NFS 共享路径", max_length=512, null=True, verbose_name="NFS 路径"
                    ),
                ),
                (
                    "local_path",
                    models.CharField(
                        blank=True, help_text="本地存储挂载路径", max_length=512, null=True, verbose_name="本地路径"
                    ),
                ),
                (
                    "is_accessible",
                    models.BooleanField(default=True, help_text="数据存储是否可访问", verbose_name="可访问"),
                ),
                (
                    "is_maintenance",
                    models.BooleanField(default=False, help_text="是否处于维护模式", verbose_name="维护模式"),
                ),
                (
                    "multiple_host_access",
                    models.BooleanField(default=True, help_text="是否支持多主机同时访问", verbose_name="多主机访问"),
                ),
                (
                    "is_active",
                    models.BooleanField(db_index=True, default=True, help_text="是否启用管理", verbose_name="启用状态"),
                ),
                ("tags", models.JSONField(blank=True, default=list, help_text="自定义标签列表", verbose_name="标签")),
                (
                    "extra_info",
                    models.JSONField(blank=True, default=dict, help_text="其他扩展信息", verbose_name="扩展信息"),
                ),
                (
                    "last_sync_time",
                    models.DateTimeField(blank=True, help_text="最后同步时间", null=True, verbose_name="最后同步"),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="creator_query",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator",
                    ),
                ),
                (
                    "dept_belong",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="dept_belong_query",
                        to="system.deptinfo",
                        verbose_name="Data ownership department",
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="modifier_query",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifier",
                    ),
                ),
                (
                    "hosts",
                    models.ManyToManyField(
                        blank=True,
                        help_text="可访问此存储的主机列表",
                        related_name="datastores",
                        to="virt_center.host",
                        verbose_name="挂载主机",
                    ),
                ),
                (
                    "platform",
                    models.ForeignKey(
                        help_text="所属 vCenter 平台",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="datastores",
                        to="virt_center.platform",
                        verbose_name="所属平台",
                    ),
                ),
            ],
            options={
                "verbose_name": "数据存储",
                "verbose_name_plural": "数据存储",
                "db_table": "virt_datastore",
                "ordering": ["-created_time"],
            },
        ),
        migrations.CreateModel(
            name="PlatformCredential",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(auto_now_add=True, null=True, verbose_name="Created time")),
                ("updated_time", models.DateTimeField(auto_now=True, null=True, verbose_name="Updated time")),
                ("description", models.CharField(blank=True, max_length=256, null=True, verbose_name="Description")),
                (
                    "auth_type",
                    models.CharField(
                        choices=[("password", "用户名密码"), ("token", "API Token"), ("session", "会话认证")],
                        default="password",
                        help_text="vSphere 推荐使用用户名密码认证",
                        max_length=32,
                        verbose_name="认证类型",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        blank=True,
                        help_text="vCenter/ESXi 登录用户名",
                        max_length=128,
                        null=True,
                        verbose_name="用户名",
                    ),
                ),
                (
                    "password",
                    apps.common.fields.encrypted.EncryptedCharField(
                        blank=True,
                        help_text="vCenter/ESXi 登录密码（自动加密存储）",
                        max_length=512,
                        null=True,
                        verbose_name="密码",
                    ),
                ),
                (
                    "token",
                    apps.common.fields.encrypted.EncryptedTextField(
                        blank=True, help_text="API 访问令牌（自动加密存储）", null=True, verbose_name="API Token"
                    ),
                ),
                (
                    "session_id",
                    apps.common.fields.encrypted.EncryptedCharField(
                        blank=True,
                        help_text="当前会话 ID（自动加密存储）",
                        max_length=512,
                        null=True,
                        verbose_name="会话 ID",
                    ),
                ),
                (
                    "session_expires",
                    models.DateTimeField(blank=True, help_text="会话过期时间", null=True, verbose_name="会话过期时间"),
                ),
                (
                    "extra_data",
                    models.JSONField(
                        blank=True, default=dict, help_text="其他认证相关数据，JSON 格式", verbose_name="扩展数据"
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="creator_query",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator",
                    ),
                ),
                (
                    "dept_belong",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="dept_belong_query",
                        to="system.deptinfo",
                        verbose_name="Data ownership department",
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="modifier_query",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifier",
                    ),
                ),
                (
                    "platform",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="credential",
                        to="virt_center.platform",
                        verbose_name="所属平台",
                    ),
                ),
            ],
            options={
                "verbose_name": "平台认证凭据",
                "verbose_name_plural": "平台认证凭据",
                "db_table": "virt_platform_credential",
            },
        ),
        migrations.CreateModel(
            name="StoragePolicy",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(auto_now_add=True, null=True, verbose_name="Created time")),
                ("updated_time", models.DateTimeField(auto_now=True, null=True, verbose_name="Updated time")),
                ("name", models.CharField(help_text="存储策略名称", max_length=256, verbose_name="策略名称")),
                (
                    "policy_id",
                    models.CharField(help_text="vSphere 策略 ID", max_length=128, unique=True, verbose_name="策略 ID"),
                ),
                (
                    "description",
                    models.TextField(blank=True, help_text="存储策略描述", null=True, verbose_name="策略描述"),
                ),
                (
                    "rules",
                    models.JSONField(blank=True, default=dict, help_text="策略规则定义", verbose_name="策略规则"),
                ),
                (
                    "is_default",
                    models.BooleanField(default=False, help_text="是否为默认存储策略", verbose_name="默认策略"),
                ),
                ("is_active", models.BooleanField(default=True, help_text="是否启用", verbose_name="启用状态")),
                (
                    "compatible_datastores",
                    models.ManyToManyField(
                        blank=True,
                        help_text="符合该策略的数据存储",
                        related_name="policies",
                        to="virt_center.datastore",
                        verbose_name="兼容存储",
                    ),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="creator_query",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator",
                    ),
                ),
                (
                    "dept_belong",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="dept_belong_query",
                        to="system.deptinfo",
                        verbose_name="Data ownership department",
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="modifier_query",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifier",
                    ),
                ),
                (
                    "platform",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="storage_policies",
                        to="virt_center.platform",
                        verbose_name="所属平台",
                    ),
                ),
            ],
            options={
                "verbose_name": "存储策略",
                "verbose_name_plural": "存储策略",
                "db_table": "virt_storage_policy",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="VirtualMachine",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(auto_now_add=True, null=True, verbose_name="Created time")),
                ("updated_time", models.DateTimeField(auto_now=True, null=True, verbose_name="Updated time")),
                ("description", models.CharField(blank=True, max_length=256, null=True, verbose_name="Description")),
                (
                    "name",
                    models.CharField(
                        db_index=True, help_text="虚拟机显示名称", max_length=128, verbose_name="虚拟机名称"
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        blank=True, help_text="虚拟机显示名称", max_length=256, null=True, verbose_name="显示名称"
                    ),
                ),
                (
                    "mo_ref",
                    models.CharField(
                        blank=True,
                        help_text="vSphere Managed Object Reference ID",
                        max_length=128,
                        null=True,
                        verbose_name="MO 引用",
                    ),
                ),
                (
                    "uuid",
                    models.CharField(
                        blank=True, help_text="虚拟机 UUID", max_length=128, null=True, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "instance_uuid",
                    models.CharField(
                        blank=True, help_text="vCenter 实例 UUID", max_length=128, null=True, verbose_name="实例 UUID"
                    ),
                ),
                (
                    "cluster_name",
                    models.CharField(
                        blank=True, help_text="所属 vSphere 集群", max_length=128, null=True, verbose_name="集群名称"
                    ),
                ),
                (
                    "datacenter_name",
                    models.CharField(
                        blank=True, help_text="所属数据中心", max_length=128, null=True, verbose_name="数据中心"
                    ),
                ),
                (
                    "resource_pool",
                    models.CharField(
                        blank=True, help_text="所属资源池路径", max_length=256, null=True, verbose_name="资源池"
                    ),
                ),
                (
                    "folder",
                    models.CharField(
                        blank=True, help_text="虚拟机所在文件夹路径", max_length=512, null=True, verbose_name="文件夹"
                    ),
                ),
                (
                    "status",
                    models.SmallIntegerField(
                        choices=[
                            (0, "未知"),
                            (1, "运行中"),
                            (2, "已停止"),
                            (3, "已挂起"),
                            (4, "创建中"),
                            (5, "删除中"),
                            (6, "异常"),
                        ],
                        default=0,
                        help_text="虚拟机运行状态",
                        verbose_name="运行状态",
                    ),
                ),
                (
                    "power_state",
                    models.CharField(
                        choices=[("poweredOn", "已开机"), ("poweredOff", "已关机"), ("suspended", "已挂起")],
                        default="poweredOff",
                        help_text="虚拟机电源状态",
                        max_length=32,
                        verbose_name="电源状态",
                    ),
                ),
                (
                    "connection_state",
                    models.CharField(
                        blank=True, help_text="与主机的连接状态", max_length=64, null=True, verbose_name="连接状态"
                    ),
                ),
                (
                    "os_type",
                    models.CharField(
                        choices=[
                            ("windows", "Windows"),
                            ("linux", "Linux"),
                            ("centos", "CentOS"),
                            ("ubuntu", "Ubuntu"),
                            ("debian", "Debian"),
                            ("redhat", "Red Hat"),
                            ("other", "其他"),
                        ],
                        default="other",
                        help_text="操作系统类型",
                        max_length=64,
                        verbose_name="操作系统类型",
                    ),
                ),
                (
                    "os_full_name",
                    models.CharField(
                        blank=True, help_text="完整的操作系统名称", max_length=256, null=True, verbose_name="操作系统"
                    ),
                ),
                (
                    "guest_id",
                    models.CharField(
                        blank=True, help_text="vSphere Guest ID", max_length=128, null=True, verbose_name="客户机 ID"
                    ),
                ),
                (
                    "guest_state",
                    models.CharField(
                        blank=True, help_text="VMware Tools 状态", max_length=64, null=True, verbose_name="客户机状态"
                    ),
                ),
                (
                    "tools_status",
                    models.CharField(
                        blank=True,
                        help_text="VMware Tools 运行状态",
                        max_length=64,
                        null=True,
                        verbose_name="Tools 状态",
                    ),
                ),
                (
                    "tools_version",
                    models.CharField(
                        blank=True, help_text="VMware Tools 版本", max_length=64, null=True, verbose_name="Tools 版本"
                    ),
                ),
                ("cpu_count", models.IntegerField(default=1, help_text="分配的 vCPU 数量", verbose_name="CPU 数量")),
                (
                    "cpu_cores_per_socket",
                    models.IntegerField(default=1, help_text="每个 CPU 插槽的核心数", verbose_name="每插槽核心数"),
                ),
                (
                    "memory_mb",
                    models.IntegerField(default=1024, help_text="分配的内存大小，单位 MB", verbose_name="内存大小"),
                ),
                (
                    "hardware_version",
                    models.CharField(
                        blank=True, help_text="虚拟机硬件版本", max_length=32, null=True, verbose_name="虚拟硬件版本"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, help_text="虚拟机主 IP 地址", null=True, verbose_name="IP 地址"
                    ),
                ),
                (
                    "mac_address",
                    models.CharField(
                        blank=True, help_text="主网卡 MAC 地址", max_length=64, null=True, verbose_name="MAC 地址"
                    ),
                ),
                (
                    "hostname",
                    models.CharField(
                        blank=True, help_text="虚拟机主机名", max_length=256, null=True, verbose_name="主机名"
                    ),
                ),
                ("disk_count", models.IntegerField(default=0, help_text="虚拟磁盘数量", verbose_name="磁盘数量")),
                (
                    "total_disk_gb",
                    models.IntegerField(default=0, help_text="磁盘总容量，单位 GB", verbose_name="磁盘总量"),
                ),
                (
                    "cpu_usage_percent",
                    models.FloatField(
                        default=0.0,
                        help_text="CPU 使用率百分比（快照）",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="CPU 使用率",
                    ),
                ),
                (
                    "memory_usage_percent",
                    models.FloatField(
                        default=0.0,
                        help_text="内存使用率百分比（快照）",
                        validators=[
                            django.core.validators.MinValueValidator(0),
                            django.core.validators.MaxValueValidator(100),
                        ],
                        verbose_name="内存使用率",
                    ),
                ),
                (
                    "has_snapshots",
                    models.BooleanField(default=False, help_text="是否存在快照", verbose_name="存在快照"),
                ),
                ("snapshot_count", models.IntegerField(default=0, help_text="快照数量", verbose_name="快照数量")),
                (
                    "is_template",
                    models.BooleanField(
                        db_index=True, default=False, help_text="是否为虚拟机模板", verbose_name="是否模板"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(db_index=True, default=True, help_text="是否启用管理", verbose_name="启用状态"),
                ),
                (
                    "auto_start",
                    models.BooleanField(
                        default=False, help_text="主机启动时是否自动启动虚拟机", verbose_name="自动启动"
                    ),
                ),
                ("tags", models.JSONField(blank=True, default=list, help_text="自定义标签列表", verbose_name="标签")),
                ("notes", models.TextField(blank=True, help_text="虚拟机备注信息", null=True, verbose_name="备注")),
                (
                    "extra_info",
                    models.JSONField(blank=True, default=dict, help_text="其他扩展信息", verbose_name="扩展信息"),
                ),
                (
                    "boot_time",
                    models.DateTimeField(blank=True, help_text="虚拟机启动时间", null=True, verbose_name="启动时间"),
                ),
                (
                    "last_seen",
                    models.DateTimeField(blank=True, help_text="最后一次在线时间", null=True, verbose_name="最后在线"),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="creator_query",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator",
                    ),
                ),
                (
                    "dept_belong",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="dept_belong_query",
                        to="system.deptinfo",
                        verbose_name="Data ownership department",
                    ),
                ),
                (
                    "host",
                    models.ForeignKey(
                        blank=True,
                        help_text="当前运行的 ESXi 主机",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="vms",
                        to="virt_center.host",
                        verbose_name="所在主机",
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="modifier_query",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifier",
                    ),
                ),
                (
                    "platform",
                    models.ForeignKey(
                        help_text="所属 vCenter 平台",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vms",
                        to="virt_center.platform",
                        verbose_name="所属平台",
                    ),
                ),
            ],
            options={
                "verbose_name": "虚拟机",
                "verbose_name_plural": "虚拟机",
                "db_table": "virt_vm",
                "ordering": ["-created_time"],
            },
        ),
        migrations.CreateModel(
            name="VMDisk",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "label",
                    models.CharField(help_text="磁盘标签，如 Hard disk 1", max_length=128, verbose_name="磁盘标签"),
                ),
                ("device_key", models.IntegerField(help_text="vSphere 设备键", verbose_name="设备键")),
                ("unit_number", models.IntegerField(help_text="SCSI 控制器单元编号", verbose_name="单元编号")),
                (
                    "datastore_name",
                    models.CharField(help_text="磁盘所在数据存储", max_length=256, verbose_name="数据存储"),
                ),
                ("file_path", models.CharField(help_text="VMDK 文件路径", max_length=512, verbose_name="文件路径")),
                ("capacity_gb", models.IntegerField(help_text="磁盘容量，单位 GB", verbose_name="磁盘容量")),
                (
                    "disk_type",
                    models.CharField(
                        choices=[("thin", "精简置备"), ("thick_lazy", "厚置备延迟置零"), ("thick_eager", "厚置备置零")],
                        default="thin",
                        help_text="置备类型",
                        max_length=32,
                        verbose_name="磁盘类型",
                    ),
                ),
                (
                    "disk_mode",
                    models.CharField(
                        choices=[
                            ("persistent", "持久"),
                            ("independent_persistent", "独立持久"),
                            ("independent_nonpersistent", "独立非持久"),
                        ],
                        default="persistent",
                        help_text="磁盘持久化模式",
                        max_length=64,
                        verbose_name="磁盘模式",
                    ),
                ),
                ("used_gb", models.IntegerField(default=0, help_text="实际占用空间，单位 GB", verbose_name="已用空间")),
                ("controller_key", models.IntegerField(help_text="SCSI 控制器键", verbose_name="控制器键")),
                (
                    "controller_type",
                    models.CharField(
                        blank=True, help_text="SCSI 控制器类型", max_length=64, null=True, verbose_name="控制器类型"
                    ),
                ),
                ("shares", models.IntegerField(default=1000, help_text="磁盘 I/O 份额", verbose_name="份额")),
                (
                    "extra_config",
                    models.JSONField(blank=True, default=dict, help_text="其他磁盘配置", verbose_name="扩展配置"),
                ),
                (
                    "vm",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="disks",
                        to="virt_center.virtualmachine",
                        verbose_name="所属虚拟机",
                    ),
                ),
            ],
            options={
                "verbose_name": "虚拟机磁盘",
                "verbose_name_plural": "虚拟机磁盘",
                "db_table": "virt_vm_disk",
                "ordering": ["unit_number"],
            },
        ),
        migrations.CreateModel(
            name="VMMetrics",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "cpu_usage_percent",
                    models.FloatField(default=0.0, help_text="CPU 使用率百分比", verbose_name="CPU 使用率"),
                ),
                (
                    "cpu_usage_mhz",
                    models.IntegerField(default=0, help_text="已使用 CPU 频率，单位 MHz", verbose_name="CPU 使用频率"),
                ),
                (
                    "cpu_ready_percent",
                    models.FloatField(default=0.0, help_text="CPU 就绪时间百分比", verbose_name="CPU 就绪率"),
                ),
                (
                    "memory_usage_percent",
                    models.FloatField(default=0.0, help_text="内存使用率百分比", verbose_name="内存使用率"),
                ),
                (
                    "memory_used_mb",
                    models.BigIntegerField(default=0, help_text="已使用内存，单位 MB", verbose_name="已用内存"),
                ),
                (
                    "memory_active_mb",
                    models.BigIntegerField(default=0, help_text="活动内存，单位 MB", verbose_name="活动内存"),
                ),
                (
                    "memory_consumed_mb",
                    models.BigIntegerField(default=0, help_text="虚拟机消耗内存，单位 MB", verbose_name="消耗内存"),
                ),
                (
                    "memory_balloon_mb",
                    models.BigIntegerField(default=0, help_text="气球驱动内存，单位 MB", verbose_name="气球内存"),
                ),
                (
                    "network_rx_kbps",
                    models.BigIntegerField(default=0, help_text="网络接收速率，单位 KBps", verbose_name="网络接收速率"),
                ),
                (
                    "network_tx_kbps",
                    models.BigIntegerField(default=0, help_text="网络发送速率，单位 KBps", verbose_name="网络发送速率"),
                ),
                (
                    "network_rx_packets",
                    models.BigIntegerField(default=0, help_text="网络接收包数", verbose_name="接收包数"),
                ),
                (
                    "network_tx_packets",
                    models.BigIntegerField(default=0, help_text="网络发送包数", verbose_name="发送包数"),
                ),
                (
                    "disk_read_kbps",
                    models.BigIntegerField(default=0, help_text="磁盘读取速率，单位 KBps", verbose_name="磁盘读速率"),
                ),
                (
                    "disk_write_kbps",
                    models.BigIntegerField(default=0, help_text="磁盘写入速率，单位 KBps", verbose_name="磁盘写速率"),
                ),
                (
                    "disk_read_iops",
                    models.IntegerField(default=0, help_text="磁盘读取 IOPS", verbose_name="磁盘读 IOPS"),
                ),
                (
                    "disk_write_iops",
                    models.IntegerField(default=0, help_text="磁盘写入 IOPS", verbose_name="磁盘写 IOPS"),
                ),
                (
                    "disk_latency_ms",
                    models.FloatField(default=0.0, help_text="磁盘延迟，单位毫秒", verbose_name="磁盘延迟"),
                ),
                (
                    "collected_at",
                    models.DateTimeField(db_index=True, help_text="指标采集时间", verbose_name="采集时间"),
                ),
                (
                    "memory_swapped_mb",
                    models.BigIntegerField(default=0, help_text="交换到磁盘的内存，单位 MB", verbose_name="交换内存"),
                ),
                (
                    "vm",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="metrics",
                        to="virt_center.virtualmachine",
                        verbose_name="所属虚拟机",
                    ),
                ),
            ],
            options={
                "verbose_name": "虚拟机监控指标",
                "verbose_name_plural": "虚拟机监控指标",
                "db_table": "virt_vm_metrics",
                "ordering": ["-collected_at"],
            },
        ),
        migrations.CreateModel(
            name="VMNetwork",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "label",
                    models.CharField(
                        help_text="网卡标签，如 Network adapter 1", max_length=128, verbose_name="网卡标签"
                    ),
                ),
                ("device_key", models.IntegerField(help_text="vSphere 设备键", verbose_name="设备键")),
                (
                    "network_name",
                    models.CharField(help_text="端口组或网络名称", max_length=256, verbose_name="网络名称"),
                ),
                (
                    "network_type",
                    models.CharField(
                        choices=[("portgroup", "标准端口组"), ("dvportgroup", "分布式端口组")],
                        help_text="网络类型",
                        max_length=32,
                        verbose_name="网络类型",
                    ),
                ),
                (
                    "adapter_type",
                    models.CharField(
                        choices=[
                            ("e1000", "E1000"),
                            ("e1000e", "E1000E"),
                            ("vmxnet2", "VMXNET 2"),
                            ("vmxnet3", "VMXNET 3"),
                        ],
                        default="vmxnet3",
                        help_text="虚拟网卡类型",
                        max_length=32,
                        verbose_name="网卡类型",
                    ),
                ),
                ("mac_address", models.CharField(help_text="网卡 MAC 地址", max_length=64, verbose_name="MAC 地址")),
                (
                    "mac_type",
                    models.CharField(
                        blank=True,
                        help_text="MAC 地址分配类型（手动/自动）",
                        max_length=32,
                        null=True,
                        verbose_name="MAC 类型",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, help_text="分配的 IP 地址", null=True, verbose_name="IP 地址"
                    ),
                ),
                (
                    "netmask",
                    models.CharField(
                        blank=True, help_text="子网掩码", max_length=64, null=True, verbose_name="子网掩码"
                    ),
                ),
                (
                    "gateway",
                    models.GenericIPAddressField(blank=True, help_text="默认网关", null=True, verbose_name="网关"),
                ),
                ("connected", models.BooleanField(default=True, help_text="网卡是否已连接", verbose_name="已连接")),
                (
                    "start_connected",
                    models.BooleanField(default=True, help_text="虚拟机启动时是否连接网卡", verbose_name="启动时连接"),
                ),
                (
                    "extra_config",
                    models.JSONField(blank=True, default=dict, help_text="其他网络配置", verbose_name="扩展配置"),
                ),
                (
                    "vm",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="networks",
                        to="virt_center.virtualmachine",
                        verbose_name="所属虚拟机",
                    ),
                ),
            ],
            options={
                "verbose_name": "虚拟机网络",
                "verbose_name_plural": "虚拟机网络",
                "db_table": "virt_vm_network",
                "ordering": ["device_key"],
            },
        ),
        migrations.CreateModel(
            name="VMSnapshot",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(auto_now_add=True, null=True, verbose_name="Created time")),
                ("updated_time", models.DateTimeField(auto_now=True, null=True, verbose_name="Updated time")),
                ("name", models.CharField(help_text="快照显示名称", max_length=256, verbose_name="快照名称")),
                ("snapshot_id", models.IntegerField(help_text="vSphere 快照 ID", verbose_name="快照 ID")),
                (
                    "description",
                    models.TextField(blank=True, help_text="快照描述信息", null=True, verbose_name="快照描述"),
                ),
                ("is_current", models.BooleanField(default=False, help_text="是否为当前快照", verbose_name="当前快照")),
                (
                    "is_quiesced",
                    models.BooleanField(
                        default=False, help_text="是否为静默快照（暂停虚拟机文件系统）", verbose_name="静默快照"
                    ),
                ),
                (
                    "is_memory",
                    models.BooleanField(default=False, help_text="是否包含虚拟机内存", verbose_name="内存快照"),
                ),
                (
                    "size_mb",
                    models.BigIntegerField(default=0, help_text="快照占用空间，单位 MB", verbose_name="快照大小"),
                ),
                (
                    "power_state_on_snapshot",
                    models.CharField(
                        blank=True,
                        help_text="创建快照时的虚拟机电源状态",
                        max_length=32,
                        null=True,
                        verbose_name="快照时电源状态",
                    ),
                ),
                ("snapshot_time", models.DateTimeField(help_text="快照创建时间", verbose_name="快照时间")),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="creator_query",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator",
                    ),
                ),
                (
                    "dept_belong",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="dept_belong_query",
                        to="system.deptinfo",
                        verbose_name="Data ownership department",
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="modifier_query",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifier",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        help_text="父快照（用于快照树）",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="virt_center.vmsnapshot",
                        verbose_name="父快照",
                    ),
                ),
                (
                    "vm",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="snapshots",
                        to="virt_center.virtualmachine",
                        verbose_name="所属虚拟机",
                    ),
                ),
            ],
            options={
                "verbose_name": "虚拟机快照",
                "verbose_name_plural": "虚拟机快照",
                "db_table": "virt_vm_snapshot",
                "ordering": ["-snapshot_time"],
            },
        ),
        migrations.CreateModel(
            name="VMTemplate",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(auto_now_add=True, null=True, verbose_name="Created time")),
                ("updated_time", models.DateTimeField(auto_now=True, null=True, verbose_name="Updated time")),
                ("description", models.CharField(blank=True, max_length=256, null=True, verbose_name="Description")),
                (
                    "name",
                    models.CharField(
                        db_index=True, help_text="虚拟机模板名称", max_length=256, verbose_name="模板名称"
                    ),
                ),
                (
                    "display_name",
                    models.CharField(
                        blank=True, help_text="显示名称", max_length=256, null=True, verbose_name="显示名称"
                    ),
                ),
                (
                    "mo_ref",
                    models.CharField(
                        blank=True, help_text="vSphere MO引用", max_length=128, null=True, verbose_name="MO 引用"
                    ),
                ),
                (
                    "uuid",
                    models.CharField(
                        blank=True, help_text="模板 UUID", max_length=128, null=True, unique=True, verbose_name="UUID"
                    ),
                ),
                (
                    "os_type",
                    models.CharField(
                        blank=True, help_text="操作系统类型", max_length=64, null=True, verbose_name="操作系统类型"
                    ),
                ),
                ("cpu_count", models.IntegerField(default=1, help_text="vCPU 数量", verbose_name="CPU 数量")),
                (
                    "memory_mb",
                    models.IntegerField(default=1024, help_text="内存大小，单位 MB", verbose_name="内存大小"),
                ),
                ("disk_gb", models.IntegerField(default=20, help_text="磁盘大小，单位 GB", verbose_name="磁盘大小")),
                (
                    "category",
                    models.CharField(
                        blank=True, help_text="模板分类", max_length=128, null=True, verbose_name="模板分类"
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(db_index=True, default=True, help_text="是否启用", verbose_name="启用状态"),
                ),
                ("tags", models.JSONField(blank=True, default=list, help_text="标签列表", verbose_name="标签")),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="creator_query",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator",
                    ),
                ),
                (
                    "dept_belong",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="dept_belong_query",
                        to="system.deptinfo",
                        verbose_name="Data ownership department",
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="modifier_query",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifier",
                    ),
                ),
                (
                    "platform",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="vm_templates",
                        to="virt_center.platform",
                        verbose_name="所属平台",
                    ),
                ),
            ],
            options={
                "verbose_name": "虚拟机模板",
                "verbose_name_plural": "虚拟机模板",
                "db_table": "virt_vm_template",
                "ordering": ["-created_time"],
            },
        ),
        migrations.CreateModel(
            name="HostMetrics",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "cpu_usage_percent",
                    models.FloatField(default=0.0, help_text="CPU 使用率百分比", verbose_name="CPU 使用率"),
                ),
                (
                    "cpu_usage_mhz",
                    models.IntegerField(default=0, help_text="已使用 CPU 频率，单位 MHz", verbose_name="CPU 使用频率"),
                ),
                (
                    "cpu_ready_percent",
                    models.FloatField(default=0.0, help_text="CPU 就绪时间百分比", verbose_name="CPU 就绪率"),
                ),
                (
                    "memory_usage_percent",
                    models.FloatField(default=0.0, help_text="内存使用率百分比", verbose_name="内存使用率"),
                ),
                (
                    "memory_used_mb",
                    models.BigIntegerField(default=0, help_text="已使用内存，单位 MB", verbose_name="已用内存"),
                ),
                (
                    "memory_active_mb",
                    models.BigIntegerField(default=0, help_text="活动内存，单位 MB", verbose_name="活动内存"),
                ),
                (
                    "memory_consumed_mb",
                    models.BigIntegerField(default=0, help_text="虚拟机消耗内存，单位 MB", verbose_name="消耗内存"),
                ),
                (
                    "memory_balloon_mb",
                    models.BigIntegerField(default=0, help_text="气球驱动内存，单位 MB", verbose_name="气球内存"),
                ),
                (
                    "network_rx_kbps",
                    models.BigIntegerField(default=0, help_text="网络接收速率，单位 KBps", verbose_name="网络接收速率"),
                ),
                (
                    "network_tx_kbps",
                    models.BigIntegerField(default=0, help_text="网络发送速率，单位 KBps", verbose_name="网络发送速率"),
                ),
                (
                    "network_rx_packets",
                    models.BigIntegerField(default=0, help_text="网络接收包数", verbose_name="接收包数"),
                ),
                (
                    "network_tx_packets",
                    models.BigIntegerField(default=0, help_text="网络发送包数", verbose_name="发送包数"),
                ),
                (
                    "disk_read_kbps",
                    models.BigIntegerField(default=0, help_text="磁盘读取速率，单位 KBps", verbose_name="磁盘读速率"),
                ),
                (
                    "disk_write_kbps",
                    models.BigIntegerField(default=0, help_text="磁盘写入速率，单位 KBps", verbose_name="磁盘写速率"),
                ),
                (
                    "disk_read_iops",
                    models.IntegerField(default=0, help_text="磁盘读取 IOPS", verbose_name="磁盘读 IOPS"),
                ),
                (
                    "disk_write_iops",
                    models.IntegerField(default=0, help_text="磁盘写入 IOPS", verbose_name="磁盘写 IOPS"),
                ),
                (
                    "disk_latency_ms",
                    models.FloatField(default=0.0, help_text="磁盘延迟，单位毫秒", verbose_name="磁盘延迟"),
                ),
                (
                    "collected_at",
                    models.DateTimeField(db_index=True, help_text="指标采集时间", verbose_name="采集时间"),
                ),
                (
                    "host",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="metrics",
                        to="virt_center.host",
                        verbose_name="所属主机",
                    ),
                ),
            ],
            options={
                "verbose_name": "主机监控指标",
                "verbose_name_plural": "主机监控指标",
                "db_table": "virt_host_metrics",
                "ordering": ["-collected_at"],
                "indexes": [models.Index(fields=["host", "-collected_at"], name="virt_host_m_host_id_f9ed84_idx")],
            },
        ),
        migrations.CreateModel(
            name="HostNetwork",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(help_text="vSwitch 或端口组名称", max_length=128, verbose_name="网络名称")),
                (
                    "network_type",
                    models.CharField(
                        choices=[
                            ("vswitch", "标准交换机"),
                            ("dvswitch", "分布式交换机"),
                            ("portgroup", "端口组"),
                            ("vmkernel", "VMkernel"),
                        ],
                        help_text="虚拟交换机类型",
                        max_length=32,
                        verbose_name="网络类型",
                    ),
                ),
                (
                    "vswitch_name",
                    models.CharField(
                        blank=True, help_text="所属虚拟交换机名称", max_length=128, null=True, verbose_name="虚拟交换机"
                    ),
                ),
                (
                    "portgroup_name",
                    models.CharField(
                        blank=True, help_text="端口组名称", max_length=128, null=True, verbose_name="端口组"
                    ),
                ),
                (
                    "physical_nics",
                    models.JSONField(blank=True, default=list, help_text="绑定的物理网卡列表", verbose_name="物理网卡"),
                ),
                (
                    "vlan_id",
                    models.IntegerField(
                        blank=True, help_text="VLAN ID，0 表示无 VLAN", null=True, verbose_name="VLAN ID"
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, help_text="VMkernel IP 地址", null=True, verbose_name="IP 地址"
                    ),
                ),
                (
                    "netmask",
                    models.CharField(
                        blank=True, help_text="子网掩码", max_length=64, null=True, verbose_name="子网掩码"
                    ),
                ),
                (
                    "gateway",
                    models.GenericIPAddressField(blank=True, help_text="默认网关", null=True, verbose_name="网关"),
                ),
                ("mtu", models.IntegerField(default=1500, help_text="最大传输单元", verbose_name="MTU")),
                ("speed_mbps", models.IntegerField(default=1000, help_text="网络带宽，单位 Mbps", verbose_name="带宽")),
                (
                    "vmotion_enabled",
                    models.BooleanField(default=False, help_text="是否启用 vMotion", verbose_name="启用 vMotion"),
                ),
                (
                    "management_enabled",
                    models.BooleanField(default=False, help_text="是否启用管理流量", verbose_name="启用管理"),
                ),
                (
                    "vsan_enabled",
                    models.BooleanField(default=False, help_text="是否启用 vSAN", verbose_name="启用 vSAN"),
                ),
                (
                    "ft_enabled",
                    models.BooleanField(default=False, help_text="是否启用容错功能", verbose_name="启用容错"),
                ),
                ("is_active", models.BooleanField(default=True, help_text="网络是否启用", verbose_name="启用状态")),
                (
                    "extra_config",
                    models.JSONField(blank=True, default=dict, help_text="其他网络配置信息", verbose_name="扩展配置"),
                ),
                (
                    "host",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="networks",
                        to="virt_center.host",
                        verbose_name="所属主机",
                    ),
                ),
            ],
            options={
                "verbose_name": "主机网络",
                "verbose_name_plural": "主机网络",
                "db_table": "virt_host_network",
                "indexes": [models.Index(fields=["host", "network_type"], name="virt_host_n_host_id_e0660d_idx")],
                "unique_together": {("host", "name")},
            },
        ),
        migrations.CreateModel(
            name="OperationTask",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name="ID")),
                ("created_time", models.DateTimeField(auto_now_add=True, null=True, verbose_name="Created time")),
                ("updated_time", models.DateTimeField(auto_now=True, null=True, verbose_name="Updated time")),
                ("description", models.CharField(blank=True, max_length=256, null=True, verbose_name="Description")),
                (
                    "task_type",
                    models.CharField(
                        choices=[
                            ("sync_platform", "同步平台数据"),
                            ("sync_hosts", "同步主机"),
                            ("sync_vms", "同步虚拟机"),
                            ("sync_datastores", "同步存储"),
                            ("collect_metrics", "采集监控指标"),
                            ("backup_vm", "备份虚拟机"),
                            ("batch_operation", "批量操作"),
                        ],
                        max_length=64,
                        verbose_name="任务类型",
                    ),
                ),
                ("task_name", models.CharField(help_text="任务描述性名称", max_length=256, verbose_name="任务名称")),
                (
                    "status",
                    models.SmallIntegerField(
                        choices=[(0, "等待中"), (1, "执行中"), (2, "成功"), (3, "失败"), (4, "已取消")],
                        db_index=True,
                        default=0,
                        verbose_name="任务状态",
                    ),
                ),
                (
                    "celery_task_id",
                    models.CharField(
                        blank=True, help_text="Celery 任务 ID", max_length=128, null=True, verbose_name="Celery 任务 ID"
                    ),
                ),
                ("parameters", models.JSONField(blank=True, default=dict, verbose_name="任务参数")),
                (
                    "result",
                    models.JSONField(blank=True, default=dict, help_text="任务执行结果", verbose_name="执行结果"),
                ),
                ("error_message", models.TextField(blank=True, null=True, verbose_name="错误信息")),
                ("progress", models.IntegerField(default=0, help_text="任务进度 0-100", verbose_name="执行进度")),
                ("current_step", models.CharField(blank=True, max_length=256, null=True, verbose_name="当前步骤")),
                ("scheduled_time", models.DateTimeField(blank=True, null=True, verbose_name="计划执行时间")),
                ("start_time", models.DateTimeField(blank=True, null=True, verbose_name="开始时间")),
                ("end_time", models.DateTimeField(blank=True, null=True, verbose_name="结束时间")),
                (
                    "duration_seconds",
                    models.IntegerField(default=0, help_text="执行时长，单位秒", verbose_name="执行时长"),
                ),
                (
                    "creator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="creator_query",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Creator",
                    ),
                ),
                (
                    "dept_belong",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="dept_belong_query",
                        to="system.deptinfo",
                        verbose_name="Data ownership department",
                    ),
                ),
                (
                    "modifier",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        related_query_name="modifier_query",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Modifier",
                    ),
                ),
                (
                    "platform",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tasks",
                        to="virt_center.platform",
                        verbose_name="所属平台",
                    ),
                ),
            ],
            options={
                "verbose_name": "操作任务",
                "verbose_name_plural": "操作任务",
                "db_table": "virt_operation_task",
                "ordering": ["-created_time"],
                "indexes": [
                    models.Index(fields=["platform", "-created_time"], name="virt_operat_platfor_317b65_idx"),
                    models.Index(fields=["status", "-created_time"], name="virt_operat_status_c564e1_idx"),
                    models.Index(fields=["task_type", "-created_time"], name="virt_operat_task_ty_8859d4_idx"),
                    models.Index(fields=["celery_task_id"], name="virt_operat_celery__c6ef53_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="OperationLog",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False, verbose_name="ID")),
                (
                    "operation_type",
                    models.CharField(
                        choices=[
                            ("vm_create", "创建虚拟机"),
                            ("vm_delete", "删除虚拟机"),
                            ("vm_start", "启动虚拟机"),
                            ("vm_stop", "停止虚拟机"),
                            ("vm_restart", "重启虚拟机"),
                            ("vm_suspend", "挂起虚拟机"),
                            ("vm_snapshot", "创建快照"),
                            ("vm_clone", "克隆虚拟机"),
                            ("sync_data", "同步数据"),
                            ("other", "其他操作"),
                        ],
                        max_length=64,
                        verbose_name="操作类型",
                    ),
                ),
                (
                    "target_type",
                    models.CharField(
                        help_text="操作对象类型：vm、host、datastore等", max_length=64, verbose_name="目标类型"
                    ),
                ),
                ("target_id", models.CharField(help_text="操作对象的 ID", max_length=128, verbose_name="目标 ID")),
                ("target_name", models.CharField(help_text="操作对象名称", max_length=256, verbose_name="目标名称")),
                (
                    "status",
                    models.SmallIntegerField(
                        choices=[(0, "等待中"), (1, "执行中"), (2, "成功"), (3, "失败"), (4, "已取消")],
                        db_index=True,
                        default=0,
                        verbose_name="状态",
                    ),
                ),
                ("result", models.TextField(blank=True, help_text="操作执行结果", null=True, verbose_name="执行结果")),
                (
                    "error_message",
                    models.TextField(blank=True, help_text="失败时的错误信息", null=True, verbose_name="错误信息"),
                ),
                (
                    "parameters",
                    models.JSONField(blank=True, default=dict, help_text="操作参数 JSON", verbose_name="操作参数"),
                ),
                ("start_time", models.DateTimeField(auto_now_add=True, verbose_name="开始时间")),
                (
                    "end_time",
                    models.DateTimeField(blank=True, help_text="操作完成时间", null=True, verbose_name="结束时间"),
                ),
                (
                    "duration_seconds",
                    models.IntegerField(default=0, help_text="执行时长，单位秒", verbose_name="执行时长"),
                ),
                (
                    "operator",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="virt_operations",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="操作人",
                    ),
                ),
                (
                    "platform",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="operation_logs",
                        to="virt_center.platform",
                        verbose_name="所属平台",
                    ),
                ),
            ],
            options={
                "verbose_name": "操作日志",
                "verbose_name_plural": "操作日志",
                "db_table": "virt_operation_log",
                "ordering": ["-start_time"],
                "indexes": [
                    models.Index(fields=["platform", "-start_time"], name="virt_operat_platfor_967023_idx"),
                    models.Index(fields=["operator", "-start_time"], name="virt_operat_operato_f01ff8_idx"),
                    models.Index(fields=["operation_type", "-start_time"], name="virt_operat_operati_16fbbc_idx"),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="host",
            index=models.Index(fields=["platform", "status"], name="virt_host_platfor_201b46_idx"),
        ),
        migrations.AddIndex(
            model_name="host",
            index=models.Index(fields=["platform", "is_active"], name="virt_host_platfor_88015f_idx"),
        ),
        migrations.AddIndex(
            model_name="host",
            index=models.Index(fields=["cluster_name"], name="virt_host_cluster_9b6daf_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="host",
            unique_together={("platform", "name")},
        ),
        migrations.AddIndex(
            model_name="datastore",
            index=models.Index(fields=["platform", "datastore_type"], name="virt_datast_platfor_bd1f17_idx"),
        ),
        migrations.AddIndex(
            model_name="datastore",
            index=models.Index(fields=["platform", "is_active"], name="virt_datast_platfor_639a85_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="datastore",
            unique_together={("platform", "name")},
        ),
        migrations.AddIndex(
            model_name="virtualmachine",
            index=models.Index(fields=["platform", "status"], name="virt_vm_platfor_8d5056_idx"),
        ),
        migrations.AddIndex(
            model_name="virtualmachine",
            index=models.Index(fields=["platform", "is_active"], name="virt_vm_platfor_49421b_idx"),
        ),
        migrations.AddIndex(
            model_name="virtualmachine",
            index=models.Index(fields=["host", "power_state"], name="virt_vm_host_id_df492d_idx"),
        ),
        migrations.AddIndex(
            model_name="virtualmachine",
            index=models.Index(fields=["is_template"], name="virt_vm_is_temp_267c29_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="virtualmachine",
            unique_together={("platform", "name")},
        ),
        migrations.AlterUniqueTogether(
            name="vmdisk",
            unique_together={("vm", "device_key")},
        ),
        migrations.AddIndex(
            model_name="vmmetrics",
            index=models.Index(fields=["vm", "-collected_at"], name="virt_vm_met_vm_id_a4d5e7_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="vmnetwork",
            unique_together={("vm", "device_key")},
        ),
        migrations.AddIndex(
            model_name="vmsnapshot",
            index=models.Index(fields=["vm", "is_current"], name="virt_vm_sna_vm_id_2999d7_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="vmtemplate",
            unique_together={("platform", "name")},
        ),
    ]
